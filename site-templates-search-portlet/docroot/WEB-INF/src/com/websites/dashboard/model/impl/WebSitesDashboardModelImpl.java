/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.websites.dashboard.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.websites.dashboard.model.WebSitesDashboard;
import com.websites.dashboard.model.WebSitesDashboardModel;
import com.websites.dashboard.model.WebSitesDashboardSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WebSitesDashboard service. Represents a row in the &quot;websitesdashboard&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.websites.dashboard.model.WebSitesDashboardModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WebSitesDashboardImpl}.
 * </p>
 *
 * @author liferay
 * @see WebSitesDashboardImpl
 * @see com.websites.dashboard.model.WebSitesDashboard
 * @see com.websites.dashboard.model.WebSitesDashboardModel
 * @generated
 */
@JSON(strict = true)
public class WebSitesDashboardModelImpl extends BaseModelImpl<WebSitesDashboard>
	implements WebSitesDashboardModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a web sites dashboard model instance should use the {@link com.websites.dashboard.model.WebSitesDashboard} interface instead.
	 */
	public static final String TABLE_NAME = "websitesdashboard";
	public static final Object[][] TABLE_COLUMNS = {
			{ "webId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "expireDate", Types.TIMESTAMP },
			{ "renewDate", Types.TIMESTAMP },
			{ "price", Types.DOUBLE },
			{ "active_", Types.BOOLEAN },
			{ "transitionId", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "comments", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table websitesdashboard (webId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,expireDate DATE null,renewDate DATE null,price DOUBLE,active_ BOOLEAN,transitionId VARCHAR(75) null,status VARCHAR(75) null,comments VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table websitesdashboard";
	public static final String ORDER_BY_JPQL = " ORDER BY webSitesDashboard.expireDate ASC, webSitesDashboard.userId ASC, webSitesDashboard.active ASC, webSitesDashboard.status ASC";
	public static final String ORDER_BY_SQL = " ORDER BY websitesdashboard.expireDate ASC, websitesdashboard.userId ASC, websitesdashboard.active_ ASC, websitesdashboard.status ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.websites.dashboard.model.WebSitesDashboard"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.websites.dashboard.model.WebSitesDashboard"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.websites.dashboard.model.WebSitesDashboard"),
			true);
	public static long ACTIVE_COLUMN_BITMASK = 1L;
	public static long EXPIREDATE_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;
	public static long STATUS_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WebSitesDashboard toModel(WebSitesDashboardSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WebSitesDashboard model = new WebSitesDashboardImpl();

		model.setWebId(soapModel.getWebId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setExpireDate(soapModel.getExpireDate());
		model.setRenewDate(soapModel.getRenewDate());
		model.setPrice(soapModel.getPrice());
		model.setActive(soapModel.getActive());
		model.setTransitionId(soapModel.getTransitionId());
		model.setStatus(soapModel.getStatus());
		model.setComments(soapModel.getComments());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WebSitesDashboard> toModels(
		WebSitesDashboardSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WebSitesDashboard> models = new ArrayList<WebSitesDashboard>(soapModels.length);

		for (WebSitesDashboardSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.websites.dashboard.model.WebSitesDashboard"));

	public WebSitesDashboardModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _webId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWebId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _webId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WebSitesDashboard.class;
	}

	@Override
	public String getModelClassName() {
		return WebSitesDashboard.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("webId", getWebId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("expireDate", getExpireDate());
		attributes.put("renewDate", getRenewDate());
		attributes.put("price", getPrice());
		attributes.put("active", getActive());
		attributes.put("transitionId", getTransitionId());
		attributes.put("status", getStatus());
		attributes.put("comments", getComments());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long webId = (Long)attributes.get("webId");

		if (webId != null) {
			setWebId(webId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date expireDate = (Date)attributes.get("expireDate");

		if (expireDate != null) {
			setExpireDate(expireDate);
		}

		Date renewDate = (Date)attributes.get("renewDate");

		if (renewDate != null) {
			setRenewDate(renewDate);
		}

		Double price = (Double)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		String transitionId = (String)attributes.get("transitionId");

		if (transitionId != null) {
			setTransitionId(transitionId);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}
	}

	@JSON
	@Override
	public long getWebId() {
		return _webId;
	}

	@Override
	public void setWebId(long webId) {
		_webId = webId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask = -1L;

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getExpireDate() {
		return _expireDate;
	}

	@Override
	public void setExpireDate(Date expireDate) {
		_columnBitmask = -1L;

		if (_originalExpireDate == null) {
			_originalExpireDate = _expireDate;
		}

		_expireDate = expireDate;
	}

	public Date getOriginalExpireDate() {
		return _originalExpireDate;
	}

	@JSON
	@Override
	public Date getRenewDate() {
		return _renewDate;
	}

	@Override
	public void setRenewDate(Date renewDate) {
		_renewDate = renewDate;
	}

	@JSON
	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		_price = price;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_columnBitmask = -1L;

		if (!_setOriginalActive) {
			_setOriginalActive = true;

			_originalActive = _active;
		}

		_active = active;
	}

	public boolean getOriginalActive() {
		return _originalActive;
	}

	@JSON
	@Override
	public String getTransitionId() {
		if (_transitionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _transitionId;
		}
	}

	@Override
	public void setTransitionId(String transitionId) {
		_transitionId = transitionId;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask = -1L;

		_status = status;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			WebSitesDashboard.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WebSitesDashboard toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WebSitesDashboard)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WebSitesDashboardImpl webSitesDashboardImpl = new WebSitesDashboardImpl();

		webSitesDashboardImpl.setWebId(getWebId());
		webSitesDashboardImpl.setGroupId(getGroupId());
		webSitesDashboardImpl.setCompanyId(getCompanyId());
		webSitesDashboardImpl.setUserId(getUserId());
		webSitesDashboardImpl.setUserName(getUserName());
		webSitesDashboardImpl.setCreateDate(getCreateDate());
		webSitesDashboardImpl.setExpireDate(getExpireDate());
		webSitesDashboardImpl.setRenewDate(getRenewDate());
		webSitesDashboardImpl.setPrice(getPrice());
		webSitesDashboardImpl.setActive(getActive());
		webSitesDashboardImpl.setTransitionId(getTransitionId());
		webSitesDashboardImpl.setStatus(getStatus());
		webSitesDashboardImpl.setComments(getComments());

		webSitesDashboardImpl.resetOriginalValues();

		return webSitesDashboardImpl;
	}

	@Override
	public int compareTo(WebSitesDashboard webSitesDashboard) {
		int value = 0;

		value = DateUtil.compareTo(getExpireDate(),
				webSitesDashboard.getExpireDate());

		if (value != 0) {
			return value;
		}

		if (getUserId() < webSitesDashboard.getUserId()) {
			value = -1;
		}
		else if (getUserId() > webSitesDashboard.getUserId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getActive() == webSitesDashboard.getActive()) {
			value = -1;
		}
		else if (getActive() != webSitesDashboard.getActive()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = getStatus().compareTo(webSitesDashboard.getStatus());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WebSitesDashboard)) {
			return false;
		}

		WebSitesDashboard webSitesDashboard = (WebSitesDashboard)obj;

		long primaryKey = webSitesDashboard.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		WebSitesDashboardModelImpl webSitesDashboardModelImpl = this;

		webSitesDashboardModelImpl._originalGroupId = webSitesDashboardModelImpl._groupId;

		webSitesDashboardModelImpl._setOriginalGroupId = false;

		webSitesDashboardModelImpl._originalExpireDate = webSitesDashboardModelImpl._expireDate;

		webSitesDashboardModelImpl._originalActive = webSitesDashboardModelImpl._active;

		webSitesDashboardModelImpl._setOriginalActive = false;

		webSitesDashboardModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WebSitesDashboard> toCacheModel() {
		WebSitesDashboardCacheModel webSitesDashboardCacheModel = new WebSitesDashboardCacheModel();

		webSitesDashboardCacheModel.webId = getWebId();

		webSitesDashboardCacheModel.groupId = getGroupId();

		webSitesDashboardCacheModel.companyId = getCompanyId();

		webSitesDashboardCacheModel.userId = getUserId();

		webSitesDashboardCacheModel.userName = getUserName();

		String userName = webSitesDashboardCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			webSitesDashboardCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			webSitesDashboardCacheModel.createDate = createDate.getTime();
		}
		else {
			webSitesDashboardCacheModel.createDate = Long.MIN_VALUE;
		}

		Date expireDate = getExpireDate();

		if (expireDate != null) {
			webSitesDashboardCacheModel.expireDate = expireDate.getTime();
		}
		else {
			webSitesDashboardCacheModel.expireDate = Long.MIN_VALUE;
		}

		Date renewDate = getRenewDate();

		if (renewDate != null) {
			webSitesDashboardCacheModel.renewDate = renewDate.getTime();
		}
		else {
			webSitesDashboardCacheModel.renewDate = Long.MIN_VALUE;
		}

		webSitesDashboardCacheModel.price = getPrice();

		webSitesDashboardCacheModel.active = getActive();

		webSitesDashboardCacheModel.transitionId = getTransitionId();

		String transitionId = webSitesDashboardCacheModel.transitionId;

		if ((transitionId != null) && (transitionId.length() == 0)) {
			webSitesDashboardCacheModel.transitionId = null;
		}

		webSitesDashboardCacheModel.status = getStatus();

		String status = webSitesDashboardCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			webSitesDashboardCacheModel.status = null;
		}

		webSitesDashboardCacheModel.comments = getComments();

		String comments = webSitesDashboardCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			webSitesDashboardCacheModel.comments = null;
		}

		return webSitesDashboardCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{webId=");
		sb.append(getWebId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", expireDate=");
		sb.append(getExpireDate());
		sb.append(", renewDate=");
		sb.append(getRenewDate());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", active=");
		sb.append(getActive());
		sb.append(", transitionId=");
		sb.append(getTransitionId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.websites.dashboard.model.WebSitesDashboard");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>webId</column-name><column-value><![CDATA[");
		sb.append(getWebId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expireDate</column-name><column-value><![CDATA[");
		sb.append(getExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>renewDate</column-name><column-value><![CDATA[");
		sb.append(getRenewDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>transitionId</column-name><column-value><![CDATA[");
		sb.append(getTransitionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WebSitesDashboard.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			WebSitesDashboard.class
		};
	private long _webId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _expireDate;
	private Date _originalExpireDate;
	private Date _renewDate;
	private double _price;
	private boolean _active;
	private boolean _originalActive;
	private boolean _setOriginalActive;
	private String _transitionId;
	private String _status;
	private String _comments;
	private long _columnBitmask;
	private WebSitesDashboard _escapedModel;
}