/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.websites.dashboard.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.websites.dashboard.model.WebSitesDashboard;
import com.websites.dashboard.service.WebSitesDashboardLocalService;
import com.websites.dashboard.service.persistence.WebSitesDashboardPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the web sites dashboard local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.websites.dashboard.service.impl.WebSitesDashboardLocalServiceImpl}.
 * </p>
 *
 * @author liferay
 * @see com.websites.dashboard.service.impl.WebSitesDashboardLocalServiceImpl
 * @see com.websites.dashboard.service.WebSitesDashboardLocalServiceUtil
 * @generated
 */
public abstract class WebSitesDashboardLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements WebSitesDashboardLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.websites.dashboard.service.WebSitesDashboardLocalServiceUtil} to access the web sites dashboard local service.
	 */

	/**
	 * Adds the web sites dashboard to the database. Also notifies the appropriate model listeners.
	 *
	 * @param webSitesDashboard the web sites dashboard
	 * @return the web sites dashboard that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public WebSitesDashboard addWebSitesDashboard(
		WebSitesDashboard webSitesDashboard) throws SystemException {
		webSitesDashboard.setNew(true);

		return webSitesDashboardPersistence.update(webSitesDashboard);
	}

	/**
	 * Creates a new web sites dashboard with the primary key. Does not add the web sites dashboard to the database.
	 *
	 * @param webId the primary key for the new web sites dashboard
	 * @return the new web sites dashboard
	 */
	@Override
	public WebSitesDashboard createWebSitesDashboard(long webId) {
		return webSitesDashboardPersistence.create(webId);
	}

	/**
	 * Deletes the web sites dashboard with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param webId the primary key of the web sites dashboard
	 * @return the web sites dashboard that was removed
	 * @throws PortalException if a web sites dashboard with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public WebSitesDashboard deleteWebSitesDashboard(long webId)
		throws PortalException, SystemException {
		return webSitesDashboardPersistence.remove(webId);
	}

	/**
	 * Deletes the web sites dashboard from the database. Also notifies the appropriate model listeners.
	 *
	 * @param webSitesDashboard the web sites dashboard
	 * @return the web sites dashboard that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public WebSitesDashboard deleteWebSitesDashboard(
		WebSitesDashboard webSitesDashboard) throws SystemException {
		return webSitesDashboardPersistence.remove(webSitesDashboard);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(WebSitesDashboard.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return webSitesDashboardPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.websites.dashboard.model.impl.WebSitesDashboardModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return webSitesDashboardPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.websites.dashboard.model.impl.WebSitesDashboardModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return webSitesDashboardPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return webSitesDashboardPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return webSitesDashboardPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public WebSitesDashboard fetchWebSitesDashboard(long webId)
		throws SystemException {
		return webSitesDashboardPersistence.fetchByPrimaryKey(webId);
	}

	/**
	 * Returns the web sites dashboard with the primary key.
	 *
	 * @param webId the primary key of the web sites dashboard
	 * @return the web sites dashboard
	 * @throws PortalException if a web sites dashboard with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public WebSitesDashboard getWebSitesDashboard(long webId)
		throws PortalException, SystemException {
		return webSitesDashboardPersistence.findByPrimaryKey(webId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return webSitesDashboardPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the web sites dashboards.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.websites.dashboard.model.impl.WebSitesDashboardModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of web sites dashboards
	 * @param end the upper bound of the range of web sites dashboards (not inclusive)
	 * @return the range of web sites dashboards
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<WebSitesDashboard> getWebSitesDashboards(int start, int end)
		throws SystemException {
		return webSitesDashboardPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of web sites dashboards.
	 *
	 * @return the number of web sites dashboards
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getWebSitesDashboardsCount() throws SystemException {
		return webSitesDashboardPersistence.countAll();
	}

	/**
	 * Updates the web sites dashboard in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param webSitesDashboard the web sites dashboard
	 * @return the web sites dashboard that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public WebSitesDashboard updateWebSitesDashboard(
		WebSitesDashboard webSitesDashboard) throws SystemException {
		return webSitesDashboardPersistence.update(webSitesDashboard);
	}

	/**
	 * Returns the web sites dashboard local service.
	 *
	 * @return the web sites dashboard local service
	 */
	public com.websites.dashboard.service.WebSitesDashboardLocalService getWebSitesDashboardLocalService() {
		return webSitesDashboardLocalService;
	}

	/**
	 * Sets the web sites dashboard local service.
	 *
	 * @param webSitesDashboardLocalService the web sites dashboard local service
	 */
	public void setWebSitesDashboardLocalService(
		com.websites.dashboard.service.WebSitesDashboardLocalService webSitesDashboardLocalService) {
		this.webSitesDashboardLocalService = webSitesDashboardLocalService;
	}

	/**
	 * Returns the web sites dashboard remote service.
	 *
	 * @return the web sites dashboard remote service
	 */
	public com.websites.dashboard.service.WebSitesDashboardService getWebSitesDashboardService() {
		return webSitesDashboardService;
	}

	/**
	 * Sets the web sites dashboard remote service.
	 *
	 * @param webSitesDashboardService the web sites dashboard remote service
	 */
	public void setWebSitesDashboardService(
		com.websites.dashboard.service.WebSitesDashboardService webSitesDashboardService) {
		this.webSitesDashboardService = webSitesDashboardService;
	}

	/**
	 * Returns the web sites dashboard persistence.
	 *
	 * @return the web sites dashboard persistence
	 */
	public WebSitesDashboardPersistence getWebSitesDashboardPersistence() {
		return webSitesDashboardPersistence;
	}

	/**
	 * Sets the web sites dashboard persistence.
	 *
	 * @param webSitesDashboardPersistence the web sites dashboard persistence
	 */
	public void setWebSitesDashboardPersistence(
		WebSitesDashboardPersistence webSitesDashboardPersistence) {
		this.webSitesDashboardPersistence = webSitesDashboardPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.websites.dashboard.model.WebSitesDashboard",
			webSitesDashboardLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.websites.dashboard.model.WebSitesDashboard");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return WebSitesDashboard.class;
	}

	protected String getModelClassName() {
		return WebSitesDashboard.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = webSitesDashboardPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.websites.dashboard.service.WebSitesDashboardLocalService.class)
	protected com.websites.dashboard.service.WebSitesDashboardLocalService webSitesDashboardLocalService;
	@BeanReference(type = com.websites.dashboard.service.WebSitesDashboardService.class)
	protected com.websites.dashboard.service.WebSitesDashboardService webSitesDashboardService;
	@BeanReference(type = WebSitesDashboardPersistence.class)
	protected WebSitesDashboardPersistence webSitesDashboardPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private WebSitesDashboardLocalServiceClpInvoker _clpInvoker = new WebSitesDashboardLocalServiceClpInvoker();
}